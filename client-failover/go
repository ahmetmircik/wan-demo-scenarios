#!/usr/bin/env bash
set -e

finalCleanup() {
  echo "Running finalCleanup"

  echo "Downloading test logs"
  hz download

  echo "Closing remote resources"
  hz wipe

  echo "Terminating remote machines"
  aws-terminate -r us-west-1 a.box
  aws-terminate -r us-east-1 b.box
  aws-terminate -r us-east-2 c.box
}
trap finalCleanup INT TERM EXIT

defaultHazelcastVersion=5.0

hzVersion=${1:-$defaultHazelcastVersion}

aws-create --count 3 --region us-west-1 --imageId ami-02e51256b01eaa9ef --subnetId subnet-9fa278c6 --key jenkins-ec2-key --outputFile a.box
aws-create --count 3 --region us-east-1 --outputFile b.box
aws-create --count 3 --region us-east-2 --imageId ami-093cbcaab778edd5e --subnetId subnet-0467850a244253773 --key jenkins-ec2-key-east-2 --outputFile c.box

ops="${ops} -Dhazelcast.enterprise.license.key=${HAZELCAST_EE_KEY}"
ops="${ops} -Dlog4j.configuration=file:./log4j.properties -Dhazelcast.logging.type=log4j"

hz memberOps "-Xms250M -Xmx250M ${ops}"
hz clientOps "-Xms100M -Xmx100M ${ops}"
hz cluster -id A -tag AA -size M3 -v ${hzVersion} -ee -boxes a.box -user ec2-user -upcwd log4j.properties
hz cluster -id B -tag BB -size M3 -v ${hzVersion} -ee -boxes b.box -user ec2-user -upcwd log4j.properties
hz cluster -id C -tag CC -size M3 -v ${hzVersion} -ee -boxes c.box -user ec2-user -upcwd log4j.properties

echo 'Configuring WAN Active Active'
hz wan -queueCapacity 100000 -wanAcknowledgeType ACK_ON_RECEIPT -batchSize 300 A B C
hz wan -queueCapacity 100000 -wanAcknowledgeType ACK_ON_RECEIPT -batchSize 300 B C A
hz wan -queueCapacity 100000 -wanAcknowledgeType ACK_ON_RECEIPT -batchSize 300 C A B

hz publicIp A B C

#for the new wan configuration to take effect the cluster must be bounced
# "restarted" and the new xml config will be used
hz bounce

cp config-hz/A/client-hazelcast.xml client-hazelcast-A.xml
cp config-hz/B/client-hazelcast.xml client-hazelcast-B.xml
cp config-hz/C/client-hazelcast.xml client-hazelcast-C.xml

echo "Creating fail over clients"
hz failOverClient
hz cluster -id A -tag AA -size C2 -v ${hzVersion} -ee -boxes a.box -user ec2-user -upcwd failOver-client-hazelcast.xml,client-hazelcast-A.xml,client-hazelcast-B.xml,client-hazelcast-C.xml,log4j.properties

echo "Doing put operations for 30 seconds"
hz ignore com.hazelcast.spi.exception.RetryableHazelcastException:com.hazelcast.core.OperationTimeoutException:com.hazelcast.spi.exception.TargetDisconnectedException:com.hazelcast.spi.exception.TargetNotMemberException:java.lang.IllegalStateException:com.hazelcast.core.HazelcastInstanceNotActiveException
hz driver Client
hz run put &
sleep 30

echo "First check initially expected client counts"
hz driver Member.*AA
hz run untilLeastClients2

hz driver Member.*BB
hz run untilClients1

hz driver Member.*CC
hz run untilClients1

echo "Start shutdown and reboot cycle"
for i in {1..1}; do
  hz driver Member1AA
  hz run clusterShutDown

  hz driver Member.*BB
  hz run untilLeastClients2

  hz driver Member1BB
  hz run clusterShutDown

  hz driver Member.*CC
  hz run untilLeastClients2

  hz boot Member.*AA
  hz driver Member.*AA
  hz run untilClients1

  hz driver Member1CC
  hz run clusterShutDown

  hz driver Member.*AA
  hz run untilLeastClients2

  hz boot Member.*BB
  hz driver Member.*BB
  hz run untilClients1

  hz boot Member.*CC
  hz driver Member.*CC
  hz run untilClients1
done

echo "Start client selector tests"
for i in {1..1}; do
  hz driver Member.*AA
  hz run clientSelectorNone
  hz run untilClients1

  hz driver Member.*BB
  hz run untilLeastClients2

  hz driver Member.*AA
  hz run clientSelectorAny

  hz driver Member.*BB
  hz run clientSelectorNone
  hz run untilClients1

  hz driver Member.*CC
  hz run untilLeastClients2

  hz driver Member.*CC
  hz run clientSelectorNone

  hz driver Member.*BB
  hz run clientSelectorAny

  hz driver Member.*AA
    hz run untilLeastClients2
done

#
#1. We create 3 clusters with 3 members in each. Then create a failover client,
#this client reaches all data
#2. then cluster will be available again and client reconnects there.
